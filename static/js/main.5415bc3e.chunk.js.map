{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","pattern","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","hasUrlError","test","htmlFor","type","classNames","defaultValue","event","target","onBlur","EMPTY_MOVIE","NewMovie","onAdd","count","setCount","setMovie","isImgUrlValid","setIsImgUrlValid","isImdbIdValid","setIsImdbIdValid","isFilled","handleFieldChange","field","isValid","newMovie","onSubmit","preventDefault","newDescription","newImgUrl","newImdbUrl","newImdbId","disabled","App","moviesFromServer","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5415bc3e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  pattern?: RegExp | undefined,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  pattern,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !(value.trim());\n  const hasUrlError = pattern && !pattern?.test(value) && touched;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          defaultValue={value}\n          onChange={handleChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasUrlError && !hasError && (\n        <p className=\"help is-danger\">URL is invalid</p>\n      )}\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst EMPTY_MOVIE = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [movie, setMovie] = useState<Movie>(EMPTY_MOVIE);\n  const [isImgUrlValid, setIsImgUrlValid] = useState(true);\n  const [isImdbIdValid, setIsImdbIdValid] = useState(true);\n\n  const resetForm = () => {\n    setCount(count + 1);\n    setMovie(EMPTY_MOVIE);\n  };\n\n  const isFilled = !(\n    movie.title.trim()\n    && movie.imgUrl.trim()\n    && movie.imdbUrl.trim()\n    && movie.imdbId.trim()\n  );\n\n  const handleFieldChange = (field: string, value: string) => {\n    if (field === 'imgUrl') {\n      const isValid = pattern.test(value);\n\n      setIsImgUrlValid(isValid);\n    }\n\n    if (field === 'imdbId') {\n      const isValid = pattern.test(value);\n\n      setIsImdbIdValid(isValid);\n    }\n\n    setMovie(newMovie => ({\n      ...newMovie,\n      [field]: value,\n    }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isFilled && isImgUrlValid && isImdbIdValid) {\n      return;\n    }\n\n    onAdd(movie);\n\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={\n          (value) => handleFieldChange('title', value)\n        }\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={\n          (newDescription) => handleFieldChange('description', newDescription)\n        }\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={\n          (newImgUrl) => handleFieldChange('imgUrl', newImgUrl)\n        }\n        required\n        pattern={pattern}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={\n          (newImdbUrl) => handleFieldChange('imdbUrl', newImdbUrl)\n        }\n        required\n        pattern={pattern}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={\n          (newImdbId) => handleFieldChange('imdbId', newImdbId)\n        }\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isFilled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovie] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovie(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}