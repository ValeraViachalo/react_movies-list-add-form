{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","htmlFor","type","classNames","defaultValue","event","target","onBlur","NewMovie","onAdd","EMPTY_MOVIE","count","setCount","setMovie","isFilled","handleFieldChange","field","newMovie","onSubmit","preventDefault","newDescription","newImgUrl","newImdbUrl","newImdbId","disabled","App","moviesFromServer","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18edfd8d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !(value.trim());\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          defaultValue={value}\n          onChange={handleChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const EMPTY_MOVIE = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const [count, setCount] = useState(0);\n  const [movie, setMovie] = useState<Movie>(EMPTY_MOVIE);\n\n  const resetForm = () => {\n    setCount(count + 1);\n    setMovie(EMPTY_MOVIE);\n  };\n\n  const isFilled = !(\n    movie.title.trim()\n    && movie.imgUrl.trim()\n    && movie.imdbUrl.trim()\n    && movie.imdbId.trim()\n  );\n\n  const handleFieldChange = (field: string, value: string) => {\n    setMovie(newMovie => ({\n      ...newMovie,\n      [field]: value,\n    }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isFilled) {\n      return;\n    }\n\n    onAdd(movie);\n\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={\n          (value) => handleFieldChange('title', value)\n        }\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={\n          (newDescription) => handleFieldChange('description', newDescription)\n        }\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={\n          (newImgUrl) => handleFieldChange('imgUrl', newImgUrl)\n        }\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={\n          (newImdbUrl) => handleFieldChange('imdbUrl', newImdbUrl)\n        }\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={\n          (newImdbId) => handleFieldChange('imdbId', newImdbId)\n        }\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isFilled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovie] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovie(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}